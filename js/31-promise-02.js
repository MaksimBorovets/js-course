// ================= –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ =================

const myPromise = new Promise((resolve, reject) => {
	// –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏–µ –æ–±—ä–µ–∫—Ç–∞ myPromise —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –∫–æ–¥
	// –ù–∞–ø—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
	console.log('Run some code');

	// –î–∞–ª–µ–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	// –º—ã —Å–∞–º–∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ resolve() –∏–ª–∏ reject()
	// –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ –Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

	resolve(someValue); // —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	// –∏–ª–∏
	reject('failure reason'); // –Ω–µ—É–¥–∞—á–∞
});

// ================= –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ =================

const myPromise = new Promise(function (resolve, reject) {
	setTimeout(() => {
		// –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –∑–¥–µ—Å—å –±—ã–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		// –∏ –æ–Ω –≤–µ—Ä–Ω—É–ª –Ω–∞–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é res

		res = 'success';
		// –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é resolve()
		if (res == 'success') {
			resolve('DONE!');
		} else {
			// –í —Å–ª—É—á–∞–µ –ù–ï —É—Å–ø–µ—Ö–∞ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é resolve()
			reject('FAIL!');
		}
	}, 500);
})
	.then(function (data) {
		console.log('---- Resolve function ----');
		console.log(data);
	})
	.catch(function (data) {
		console.log('---- Reject function ----');
		console.log(data);
	});

// ========== –¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤. –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —à–∞–≥–∏ ============

const promise = new Promise(function (resolve, reject) {
	setTimeout(() => {
		// –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º —á—Ç–æ –∑–¥–µ—Å—å –±—ã–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
		// –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é res
		// –∏ –¥–≤–∞–Ω–Ω—ã–µ –≤ dataFromServer
		const res = 'success';
		const dataFromServer = 'dataFromServer = DONE!';

		// !–í–ê–ñ–ù–û! –ú—ã —Å–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ
		// –ø—Ä–æ—à–µ–ª –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–µ—Ç, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		if (res == 'success') {
			// –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			// –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é resolve()
			resolve(dataFromServer);
		} else {
			// –í —Å–ª—É—á–∞–µ –ù–ï —É—Å–ø–µ—Ö–∞ –Ω–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é resolve()
			reject(dataFromServer);
		}
	}, 500);
});

promise
	.then(
		function (data) {
			console.log('Step 1');
			console.log(data);
			return 'Data from Step 1';
		},
		function (data) {
			console.log('Error');
			console.log(data);
		}
	)
	.then(
		function (data) {
			console.log('Step 2');
			console.log(data);
			return 'Data from Step 2';
		},
		function (data) {
			console.log('Error');
			console.log(data);
		}
	);

// ========== –¶–µ–ø–æ—á–∫–∞ –ø—Ä–æ–º–∏—Å–æ–≤. –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–∏—Å–æ–≤ c setTimeout ============

const checkRooms = new Promise(function (resolve, reject) {
	setTimeout(function () {
		console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –æ—Ç–µ–ª–µ...');
		// ---- –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–µ–ª—å ---
		let availableRooms = true;

		if (availableRooms) {
			resolve('–ù–æ–º–µ—Ä–∞ –µ—Å—Ç—å!');
		} else {
			reject('–ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.');
		}
	}, 1500);
})
	.then(function (data) {
		return new Promise(function (resolve, reject) {
			setTimeout(() => {
				console.log('---- then 1. checkTickets ----');
				console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);

				console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã...');
				// ---- –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é ---
				const availableTickets = true;

				if (availableTickets) {
					let message = '–ë–∏–ª–µ—Ç—ã –µ—Å—Ç—å';
					resolve('message');
				} else {
					let message = '–ë–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç';
					throw new Error(message);
				}
			}, 1000);
		});
	})
	.then(function (data) {
		console.log('---- then 2. sumbitVacation ----');
		console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);
		console.log('–ï–¥–µ–º –≤ –æ—Ç–ø—É—Å–∫! üå¥ :)');
	})
	.catch(function (data) {
		console.log('---- catch ----');
		console.log('–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ:', data);
		console.log('–û—Ç–ø—É—Å–∫ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è üò¢ :(');
	});
